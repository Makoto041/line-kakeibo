name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # Webアプリのデプロイ
  web-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
          
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
        
      - name: Deploy to Vercel
        working-directory: ./web
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Load environment variables and deploy
          export $(cat .env.local | grep -v '^#' | xargs) 2>/dev/null || true
          ./deploy.sh

  # Cloud Functionsのデプロイ  
  functions-deploy:
    runs-on: ubuntu-latest
    needs: web-deploy
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: bot/package-lock.json
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest
        
      - name: Install Bot dependencies
        working-directory: ./bot
        run: npm ci
        
      - name: Build Bot
        working-directory: ./bot
        run: npm run build
        
      - name: Deploy Firestore Rules and Indexes
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase deploy --only firestore:rules,firestore:indexes --token "$FIREBASE_TOKEN"
          
      - name: Deploy Cloud Functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase deploy --only functions --token "$FIREBASE_TOKEN"

  # Linting and Testing
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory: [web, bot]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.directory }}/package-lock.json
          
      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci
        
      - name: Run linting
        working-directory: ./${{ matrix.directory }}
        run: npm run lint || true  # Continue on lint warnings
        
      - name: Build project
        working-directory: ./${{ matrix.directory }}
        run: npm run build
        
      - name: Run tests (if available)
        working-directory: ./${{ matrix.directory }}
        run: npm test || echo "No tests configured"

  # セキュリティチェック
  security-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit for Web
        working-directory: ./web
        run: |
          npm audit --audit-level moderate || true
          
      - name: Run security audit for Bot  
        working-directory: ./bot
        run: |
          npm audit --audit-level moderate || true
          
      - name: Check for secrets in code
        run: |
          grep -r "sk-" . --exclude-dir=.git --exclude-dir=node_modules || echo "No API keys found"
          grep -r "AIza" . --exclude-dir=.git --exclude-dir=node_modules || echo "No Firebase keys found"