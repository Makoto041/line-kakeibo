name: Improved CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇíÂèØËÉΩ„Å´

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

# ÂêåÊôÇÂÆüË°å„ÅÆÂà∂Âæ°
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Â§âÊõ¥Ê§úÁü•„Ç∏„Éß„Éñ
  changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      bot: ${{ steps.filter.outputs.bot }}
      deps: ${{ steps.filter.outputs.deps }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'web/**'
              - '.github/workflows/**'
            bot:
              - 'bot/**'
              - '.github/workflows/**'
            deps:
              - 'package*.json'
              - 'pnpm-lock.yaml'
              - '**/package*.json'

  # ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Å®„Ç≠„É£„ÉÉ„Ç∑„É≥„Ç∞
  install-deps:
    runs-on: ubuntu-latest
    needs: changes
    if: |
      github.event_name == 'pull_request' || 
      needs.changes.outputs.web == 'true' || 
      needs.changes.outputs.bot == 'true' ||
      needs.changes.outputs.deps == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            web/node_modules
            bot/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  # Linting & Type Checking
  lint:
    runs-on: ubuntu-latest
    needs: [install-deps, changes]
    if: |
      github.event_name == 'pull_request' || 
      needs.changes.outputs.web == 'true' || 
      needs.changes.outputs.bot == 'true'
    strategy:
      matrix:
        app: [web, bot]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            web/node_modules
            bot/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          
      - name: Run ESLint
        working-directory: ./${{ matrix.app }}
        run: |
          pnpm run lint --if-present || echo "::warning::Lint completed with warnings/errors"
          
      - name: Run TypeScript check
        working-directory: ./${{ matrix.app }}
        run: |
          npx tsc --noEmit || echo "::warning::TypeScript check completed with errors"

  # „Éì„É´„Éâ„Å®„ÉÜ„Çπ„Éà
  build-and-test:
    runs-on: ubuntu-latest
    needs: [install-deps, changes]
    if: |
      github.event_name == 'pull_request' || 
      needs.changes.outputs.web == 'true' || 
      needs.changes.outputs.bot == 'true'
    strategy:
      matrix:
        app: [web, bot]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            web/node_modules
            bot/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          
      - name: Build ${{ matrix.app }}
        working-directory: ./${{ matrix.app }}
        run: pnpm run build
        
      - name: Run tests
        working-directory: ./${{ matrix.app }}
        run: |
          pnpm test --if-present || echo "::notice::No tests configured for ${{ matrix.app }}"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: |
            ${{ matrix.app }}/dist
            ${{ matrix.app }}/.next
          retention-days: 1

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØÔºà‰∏¶ÂàóÂÆüË°åÔºâ
  security:
    runs-on: ubuntu-latest
    needs: install-deps
    if: github.event_name == 'pull_request'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            web/node_modules
            bot/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          
      - name: Run audit
        run: |
          pnpm audit --audit-level=moderate || echo "::warning::Security vulnerabilities found"
          
      - name: Run secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified --max-depth 1
          
      - name: SAST with CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript-typescript

  # Web„Ç¢„Éó„É™„Éá„Éó„É≠„Ç§ÔºàVercelÔºâ
  deploy-web:
    runs-on: ubuntu-latest
    needs: [build-and-test, lint, changes]
    if: |
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' &&
      needs.changes.outputs.web == 'true'
    environment:
      name: production-web
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: web-build
          path: web/
          
      - name: Deploy to Vercel
        id: deploy
        run: |
          npm install -g vercel@latest
          cd web
          vercel pull --environment=production --token="${{ secrets.VERCEL_TOKEN }}" --yes --project line-kakeibo
          DEPLOYMENT_URL=$(vercel --prod --token="${{ secrets.VERCEL_TOKEN }}" --yes --project line-kakeibo)
          echo "url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT
          echo "Deployed to: ${DEPLOYMENT_URL}"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Web app deployed to: ${{ steps.deploy.outputs.url }}'
            })

  # Bot/Functions „Éá„Éó„É≠„Ç§ÔºàFirebaseÔºâ
  deploy-bot:
    runs-on: ubuntu-latest
    needs: [build-and-test, lint, changes]
    if: |
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' &&
      needs.changes.outputs.bot == 'true'
    environment:
      name: production-bot
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: bot-build
          path: bot/
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v3
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy to Firebase
        run: |
          npm install -g firebase-tools@latest
          firebase deploy --only functions,firestore:rules,firestore:indexes --project ${{ secrets.FIREBASE_PROJECT_ID }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

  # „Éá„Éó„É≠„Ç§Âæå„ÅÆÂÅ•ÂÖ®ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
  post-deploy-check:
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-bot]
    if: always() && (needs.deploy-web.result == 'success' || needs.deploy-bot.result == 'success')
    steps:
      - name: Health check - Web
        if: needs.deploy-web.result == 'success'
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-app.vercel.app/api/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Web app is healthy"
          else
            echo "‚ùå Web app health check failed"
            exit 1
          fi
          
      - name: Health check - Bot
        if: needs.deploy-bot.result == 'success'
        run: |
          # Firebase Functions health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://us-central1-${{ secrets.FIREBASE_PROJECT_ID }}.cloudfunctions.net/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Bot functions are healthy"
          else
            echo "‚ùå Bot health check failed"
            exit 1
          fi
          
      - name: Send notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment Status:
            - Web: ${{ needs.deploy-web.result }}
            - Bot: ${{ needs.deploy-bot.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # „É™„É™„Éº„Çπ„Éé„Éº„ÉàÁîüÊàêÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
  release-notes:
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-bot]
    if: |
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' &&
      (needs.deploy-web.result == 'success' || needs.deploy-bot.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate release notes
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
