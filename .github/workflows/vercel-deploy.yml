name: Vercel Deployment

on:
  push:
    branches: 
      - master
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./web
      
    - name: Build Project Artifacts
      run: vercel build ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
      working-directory: ./web
      
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
          OUTPUT=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        else
          OUTPUT=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        fi
        echo "url=$OUTPUT" >> $GITHUB_OUTPUT
        echo "🚀 Deployed to: $OUTPUT"
      working-directory: ./web
      
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const url = '${{ steps.deploy.outputs.url }}';
          const environment = '${{ github.ref }}' === 'refs/heads/develop' ? 'Development' : 'Preview';
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Vercel Preview URL')
          );
          
          const body = `### 🔗 Vercel ${environment} URL
          
          🚀 **Deployment Status:** ✅ Success
          🌐 **URL:** ${url}
          📦 **Branch:** \`${{ github.head_ref || github.ref_name }}\`
          🕐 **Deployed at:** ${new Date().toISOString()}
          
          ---
          _This comment is automatically updated on each deployment._`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
          }